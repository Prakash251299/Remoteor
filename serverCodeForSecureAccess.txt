const http = require('http');
const httpProxy = require('http-proxy');
const admin = require('firebase-admin');

// Firebase Admin SDK initialization
const serviceAccount = require('/etc/keys/service-account-key.json'); // Replace with the path to your service account >admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://your-firebase-id.firebaseio.com" // Replace with your Firestore database URL
});

const db = admin.firestore();

const serverPort = 9000;     // Port on the Azure server not allowed by firewall
const proxyPort = 8080;      // Port on which Node.js server listens

// Create a new proxy server
const proxy = httpProxy.createProxyServer();

// Create a Node.js HTTP server that listens on port 8080
const server = http.createServer(async (req, res) => {
  const forwarded = req.headers['x-forwarded-for'];
  const deviceIP = forwarded ? forwarded.split(',')[0] // Use the first IP in the list (real client IP)
    : req.connection.remoteAddress || req.socket.remoteAddress;
  const ipv6MappedRegex = /::ffff:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/; // Extracts embedded IPv4
  const ipv4Regex = /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/; // Matches standalone IPv4

  // Check for IPv6-mapped IPv4 first, then standalone IPv4
  const match = deviceIP.match(ipv6MappedRegex) || deviceIP.match(ipv4Regex);

  deviceIP = match ? match[1] : 'Unknown';

  console.log(`Request from device IP: ${deviceIP}`);
  try {
    // Query Firestore for the device's permission
    const doc = await db.collection('devicePermissions').doc(deviceIP).get();
    //const s =   await db.collection('users').doc(a123).set({"name":"a","email":"a.com","imgUrl":"a.jpg",},{merge: true});

    if(doc.exists){
        console.log("doc exists");
        console.log(doc.data().permission);
    }
    if (doc.exists && doc.data().permission === 1) {
      // Permission granted, forward the request
      proxy.web(req, res, {
        target: `http://localhost:${serverPort}`, // Forward to server's port 9000
      });
    } else {
      // Permission denied, respond with an error
      res.writeHead(403, { 'Content-Type': 'text/plain' });
      res.end('Access denied: Device does not have permission.');
    }
  } catch (error) {
    console.error('Error checking Firestore:', error);
    res.writeHead(500, { 'Content-Type': 'text/plain' });
    res.end('Internal Server Error');
  }
});

// Start the server on port 8080
server.listen(proxyPort, () => {
  console.log(`Node.js server listening on port ${proxyPort}`);
});